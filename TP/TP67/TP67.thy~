theory TP67
imports Main  (* "~~/src/HOL/Library/Code_Target_Int" "~~/src/HOL/Library/Code_Char" *)
begin

(* Types des expressions, conditions et programmes (statement) *)
datatype expression= Constant int | Variable string | Sum expression expression | Sub expression expression

datatype condition= Eq expression expression

datatype statement= Seq statement statement | 
                    Aff string expression | 
                    Read string | 
                    Print expression | 
                    Exec expression | 
                    If condition statement statement |
                    Skip
(* Un exemple d'expression *)

(* expr1= (x-10) *)
definition "expr1= (Sub (Variable ''x'') (Constant 10))"


(* Des exemples de programmes *)

(* p1= exec(0) *)
definition "p1= Exec (Constant 0)"

(* p2= {
        print(10)
        exec(0+0)
       }
*)

definition "p2= (Seq (Print (Constant 10)) (Exec (Sum (Constant 0) (Constant 0))))"

(* p3= {
         x:=0
         exec(x)
       }
*)

definition "p3= (Seq (Aff ''x'' (Constant 0)) (Exec (Variable ''x'')))"

(* p4= {
         read(x)
         print(x+1)
       }
*)
definition "p4= (Seq (Read ''x'') (Print (Sum (Variable ''x'') (Constant 1))))"


(* Le type des evenements soit X: execute, soit P: print *)
datatype event= X int | P int

(* les flux de sortie, d'entree et les tables de symboles *)

type_synonym outchan= "event list"
definition "el1= [X 1, P 10, X 0, P 20]"                   (* Un exemple de flux de sortie *)

type_synonym inchan= "int list"           
definition "il1= [1,-2,10]"                                (* Un exemple de flux d'entree [1,-2,10]              *)

type_synonym symTable= "(string * int) list"
definition "(st1::symTable)= [(''x'',10),(''y'',12)]"      (* Un exemple de table de symbole *)


(* La fonction (partielle) de recherche dans une liste de couple, par exemple une table de symbole *)
datatype 'a option= None | Some 'a

fun assoc:: "'a => ('a * 'b) list => 'b option"
where
"assoc _ [] = None" |
"assoc x1 ((x,y)#xs)= (if x=x1 then Some(y) else (assoc x1 xs))"

(* Exemples de recherche dans une table de symboles *)

value "assoc ''x'' st1"     (* quand la variable est dans la table st1 *)
value "assoc ''z'' st1"     (* quand la variable n'est pas dans la table st1 *)


(* Evaluation des expressions par rapport a une table de symboles *)
fun evalE:: "expression => symTable => int"
where
"evalE (Constant s) e = s" |
"evalE (Variable s) e= (case (assoc s e) of None => -1 | Some(y) => y)" |
"evalE (Sum e1 e2) e= ((evalE e1 e) + (evalE e2 e))" |
"evalE (Sub e1 e2) e= ((evalE e1 e) - (evalE e2 e))" 

(* Exemple d'Ã\<copyright>valuation d'expression *)

value "evalE expr1 st1"

(* Evaluation des conditions par rapport a une table de symboles *)
fun evalC:: "condition => symTable => bool"
where
"evalC (Eq e1 e2) t= ((evalE e1 t) = (evalE e2 t))"

(* Evaluation d'un programme par rapport a une table des symboles, a un flux d'entree et un flux de sortie. 
   Rend un triplet: nouvelle table des symboles, nouveaux flux d'entree et sortie *)
fun evalS:: "statement \<Rightarrow> (symTable * inchan * outchan) \<Rightarrow> (symTable * inchan * outchan)"
where
"evalS Skip x=x" |
"evalS (Aff s e)  (t,inch,outch)=  (((s,(evalE e t))#t),inch,outch)" |
"evalS (If c s1 s2)  (t,inch,outch)=  (if (evalC c t) then (evalS s1 (t,inch,outch)) else (evalS s2 (t,inch,outch)))" |
"evalS (Seq s1 s2) (t,inch,outch)= 
    (let (t2,inch2,outch2)= (evalS s1 (t,inch,outch)) in
        evalS s2 (t2,inch2,outch2))" |
"evalS (Read _) (t,[],outch)= (t,[],outch)" |
"evalS (Read s) (t,(x#xs),outch)= (((s,x)#t),xs,outch)" |
"evalS (Print e) (t,inch,outch)= (t,inch,((P (evalE e t))#outch))" |
"evalS (Exec e) (t,inch,outch)= 
  (let res= evalE e t in
   (t,inch,((X res)#outch)))"



(* Exemples d'Ã\<copyright>valuation de programmes *)
(* Les programmes p1, p2, p3, p4 ont Ã\<copyright>tÃ\<copyright> dÃ\<copyright>finis plus haut *)
(* p1= exec(0) *)

value "evalS p1 ([],[],[])"

(* ------------------------------------ *)
(* p2= {
        print(10)
        exec(0+0)
       }
*)

value "evalS p2 ([],[],[])"

(* ------------------------------------ *)
(* p3= {
         x:=0
         exec(x)
       }
*)

value "evalS p3 ([],[],[])"

(* ------------------------------------ *)
(* p4= {
         read(x)
         print(x+1)
       }
*)

value "evalS p4 ([],[10],[])"


definition "bad1= (Exec (Constant 0))"
definition "bad2= (Exec (Sub (Constant 2) (Constant 2)))"
definition "bad3= (Seq (Aff ''x'' (Constant 1)) (Seq (Print (Variable ''x'')) (Exec (Sub (Variable ''x'') (Constant 1)))))"
definition "bad4= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) Skip (Aff ''y'' (Constant 1))) (Exec (Sum (Variable ''y'') (Constant 1)))))"
definition "bad5= (Seq (Read ''x'') (Seq (Aff ''y'' (Sum (Variable ''x'') (Constant 2))) (Seq (If (Eq (Variable ''x'') (Sub (Constant 0) (Constant 1))) (Seq (Aff ''x'' (Sum (Variable ''x'') (Constant 2))) (Aff ''y'' (Sub (Variable ''y'') (Variable ''x'')))) (Seq (Aff ''x'' (Sub (Variable ''x'') (Constant 2))) (Aff ''y'' (Sub (Variable ''y'') (Variable ''x''))))) (Exec (Variable ''y'')))))"
definition "bad6= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''z'' (Constant 1)) (Aff ''z'' (Constant 0))) (Exec (Variable ''z''))))"
definition "bad7= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''z'' (Constant 0)) (Aff ''z'' (Constant 1))) (Exec (Variable ''z''))))"
definition "bad8= (Seq (Read ''x'') (Seq (Read ''y'') (If (Eq (Variable ''x'') (Variable ''y'')) (Exec (Constant 1)) (Exec (Constant 0)))))"
definition "ok0= (Seq (Aff ''x'' (Constant 1)) (Seq (Read ''y'') (Seq (If (Eq (Variable ''y'') (Constant 0)) (Seq (Print (Sum (Variable ''y'') (Variable ''x'')))
(Print (Variable ''x''))
) (Print (Variable ''y''))
) (Seq (Aff ''x'' (Constant 1)) (Seq (Print (Variable ''x''))
 (Seq (Aff ''x'' (Constant 2)) (Seq (Print (Variable ''x''))
 (Seq (Aff ''x'' (Constant 3)) (Seq (Print (Variable ''x''))
 (Seq (Read ''y'') (Seq (If (Eq (Variable ''y'') (Constant 0)) (Aff ''z'' (Sum (Variable ''x'') (Variable ''x''))) (Aff ''z'' (Sub (Variable ''x'') (Variable ''y'')))) (Print (Variable ''z''))
)))))))))))"
definition "ok0bis= (Print (Variable ''y''))"
definition "ok1= (Seq (Aff ''x'' (Constant 1)) (Seq (Print (Sum (Variable ''x'') (Variable ''x'')))
 (Seq (Exec (Constant 10)) (Seq (Read ''y'') (If (Eq (Variable ''y'') (Constant 0)) (Exec (Constant 1)) (Exec (Constant 2)))))))"
definition "ok2= (Exec (Variable ''y''))"
definition "ok3= (Seq (Read ''x'') (Exec (Sum (Variable ''y'') (Constant 2))))"
definition "ok4= (Seq (Aff ''x'' (Constant 0)) (Seq (Aff ''x'' (Sum (Variable ''x'') (Constant 20))) (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''z'' (Constant 0)) (Aff ''z'' (Constant 4))) (Seq (Exec (Variable ''z'')) (Exec (Variable ''x''))))))"
definition "ok5= (Seq (Read ''x'') (Seq (Aff ''x'' (Constant 4)) (Exec (Variable ''x''))))"
definition "ok6= (Seq (If (Eq (Constant 1) (Constant 2)) (Aff ''x'' (Constant 0)) (Aff ''x'' (Constant 1))) (Exec (Variable ''x'')))"
definition "ok7= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''x'' (Constant 1)) (If (Eq (Variable ''x'') (Constant 4)) (Aff ''x'' (Constant 1)) (Aff ''x'' (Constant 1)))) (Exec (Variable ''x''))))"
definition "ok8= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''x'' (getOutchan(Constant 1)) (Aff ''x'' (Constant 2))) (Exec (Sub (Variable ''x'') (Constant 3)))))"
definition "ok9= (Seq (Read ''x'') (Seq (Read ''y'') (If (Eq (Sum (Variable ''x'') (Variable ''y'')) (Constant 0)) (Exec (Constant 1)) (Exec (Sum (Variable ''x'') (Sum (Variable ''y'') (Sum (Variable ''y'') (Variable ''x''))))))))"
definition "ok10= (Seq (Read ''x'') (If (Eq (Variable ''x'') (Constant 0)) (Exec (Constant 1)) (Exec (Variable ''x''))))"
definition "ok11= (Seq (Read ''x'') (Seq (If (Eq (Variable ''x'') (Constant 0)) (Aff ''x'' (Sum (Variable ''x'') (Constant 1))) Skip) (Exec (Variable ''x''))))"
definition "ok12= (Seq (Aff ''x'' (Constant 1)) (Seq (Read ''z'') (If (Eq (Variable ''z'') (Constant 0)) (Exec (Variable ''y'')) (Exec (Variable ''z'')))))"
definition "ok13= (Seq (Aff ''z'' (Constant 4)) (Seq (Aff ''x'' (Constant 1)) (Seq (Read ''y'') (Seq (Aff ''x'' (Sum (Variable ''x'') (Sum (Variable ''z'') (Variable ''x'')))) (Seq (Aff ''z'' (Sum (Variable ''z'') (Variable ''x''))) (Seq (If (Eq (Variable ''y'') (Constant 1)) (Aff ''x'' (Sub (Variable ''x'') (Variable ''y''))) Skip) (Seq (If (Eq (Variable ''y'') (Constant 0)) (Seq (Aff ''y'' (Sum (Variable ''y'') (Constant 1))) (Exec (Variable ''x''))) Skip) (Exec (Variable ''y'')))))))))"
definition "ok14= (Seq (Read ''x'') (Seq (Read ''y'') (If (Eq (Sum (Variable ''x'') (Variable ''y'')) (Constant 0)) (Exec (Constant 1)) (Exec (Sum (Variable ''x'') (Variable ''y''))))))"


(* Le TP commence ici! *)

(*
------------------------------------------------------------------------------------------PARTIE 3
 *)
fun BAD::  "(symTable * inchan * outchan) \<Rightarrow> bool"
where
"BAD (symTable,inchan,[]) = True"|
"BAD (symTable,inchan,(he#te)) =(if (he = (X 0))
                                   then False
                                 else (BAD (symTable,inchan,te)))"

value "BAD (evalS p1 ([],[],[]))"
value "BAD (evalS p2 ([],[],[]))"
value "BAD (evalS p3 ([],[],[]))"
value "BAD (eva (bool * tabSymbDangerous * tabSymb)lS p4 ([],[10],[]))"


(*
------------------------------------------------------------------------------------------PARTIE 4
 *)


(*
                ANALYSEUR STATIQUE 1
 *)
fun san1 :: "statement \<Rightarrow> bool"
where
"san1 (Exec _) = False"|
"san1 (Seq x y) = ((san1 x) \<and> (san1 y))"|
"san1 (If _ x y) = ((san1 x) \<and> (san1 y))"|
"san1 _ = True"

value "san1 bad1"
value "san1 bad2"
value "san1 bad3"
value "san1 bad4"
value "san1 bad5"
value "san1 bad6"
value "san1 bad7"
value "san1 bad8"

value "san1 ok0"
value "san1 ok0bis"
value "san1 ok1"
value "san1 ok2"
value "san1 ok3"
value "san1 ok4"
value "san1 ok5"
value "san1 ok6"
value "san1 ok7"
value "san1 ok8"
value "san1 ok9"
value "san1 ok10"
value "san1 ok11"
value "san1 ok12"
value "san1 ok13"
value "san1 ok14"




(*
                ANALYSEUR STATIQUE 2
 *)
fun san2 :: "statement \<Rightarrow> bool"
where
"san2 (Exec (Constant x)) =(if (x = 0) then False else True)"|
"san2 (Exec _) = False"|
"san2 (Seq x y) = ((san2 x) \<and> (san2 y))"|
"san2 (If _ x y) = ((san2 x) \<and> (san2 y))"|
"san2 _ = True"

value "san2 bad1"
value "san2 bad2"
value "san2 bad3"
value "san2 bad4"
value "san2 bad5"
value "san2 bad6"
value "san2 bad7"
value "san2 bad8"

value "san2 ok0"
value "san2 ok0bis"
value "san2 ok1"
value "san2 ok2"
value "san2 ok3"
value "san2 ok4"
value "san2 ok5"
value "san2 ok6"
value "san2 ok7"
value "san2 ok8"
value "san2 ok9"
value "san2 ok10"
value "san2 ok11"
value "san2 ok12"
value "san2 ok13"
value "san2 ok14"



(*
                ANALYSEUR STATIQUE 3
 *)

(*Fonction auxilliaires pour san3 *)

(* -------------------------------------Table De Symbole des var Dangereuses.
Table repertoriant toutes les variables ou ont ne connait pas la valeur injecté (lors des read)
Elle ne doit pas avoir de variables doublement repertoriées au sein d'elle même.
*)
type_synonym tabSymbDangerous = "string list"


(* isVarDangerous 
RECUPERE: le nom de la variable ET une table des symboles de var dangereuses
RETOURNE: faux si elle est safe, vrai si elle est impredictable
*)
fun isVarDangerous :: "string \<Rightarrow> tabSymbDangerous \<Rightarrow> bool"
where
"isVarDangerous v [] = False" | 
"isVarDangerous v (hv#tv) = (if v=hv then True else (isVarDangerous v tv))"


(* updateVarDangerous 
RECUPERE: le nom de la variable a ajouter ET une table des symboles de var dangereuses
RETOURNE: la table des symboles de var dangereuses mise a jour.
*)
fun updateVarDangerous :: "string  \<Rightarrow>  tabSymbDangerous \<Rightarrow>  tabSymbDangerous"
where
"updateVarDangerous v [] = (v#[])" |
"updateVarDangerous v (hv#tv) = (if v=hv 
                                 then (hv#tv) 
                                 else (hv#(updateVarDangerous v tv)))"

(* rmVarDangerous 
RECUPERE: le nom de la variable a supprimer ET une table des symboles de var dangereuses
RETOURNE: la table des symboles de var dangereuses mise a jour.
*)
fun rmVarDangerous :: "string  \<Rightarrow>  tabSymbDangerous \<Rightarrow>  tabSymbDangerous"
where
"rmVarDangerous v [] = []" |
"rmVarDangerous v (hv#tv) = (if v=hv 
                                 then tv 
                                 else (hv#(rmVarDangerous v tv)))"


(*----------------------------------------------------Table De Symbole des var.
Table repertoriant toutes les variables ou ont connait leur valeurs.
Elle ne doit pas avoir de variables doublement repertoriées au sein d'elle même.
*)
type_synonym tabSymb = "(string * int) list"

(* isVar 
RECUPERE: le nom de la variable ET une table des symboles de var
RETOURNE: faux si elle pas dedans, vrai sinon
*)
fun isVar :: "string \<Rightarrow> tabSymb \<Rightarrow> bool"
where
"isVar v [] = False" | 
"isVar v ((hv, hi)#tx) = (if v=hv then True else (isVar v tx))"


(* getVar 
PREREQUIS : La variable est dans la table sinon sa rend -1
RECUPERE: le nom de la variable a chercher ET une table des symboles de var
RETOURNE: la valeur de la var a chercher.
*)
fun getVar :: "string  \<Rightarrow>  tabSymb \<Rightarrow>  int"
where
"getVar v [] = -1 " |
"getVar v ((hv, hi)#tx) = (if v=hv 
                    then hi 
                    else (getVar v tx))"
(* updateVar 
RECUPERE: le nom de la variable a ajouter ET sa valeur ET une table des symboles de var
RETOURNE: la table des symboles de var mise a jour.
*)
fun updateVar :: "string  \<Rightarrow> int \<Rightarrow> tabSymb \<Rightarrow> tabSymb"
where
"updateVar v i [] = ((v, i)#[])" |
"updateVar v i ((hv, hi)#tx) = (if v=hv 
                                 then ((hv, i)#tx) 
                                 else ((hv, hi)#(updateVar v i tx)))"

(* rmVar 
RECUPERE: le nom de la variable a supprimer ET une table des symboles de var
RETOURNE: la table des symboles de var a jour.
*)
fun rmVar :: "string  \<Rightarrow>  tabSymb \<Rightarrow>  tabSymb"
where
"rmVar v [] = []" |
"rmVar v ((hv, hi)#tx) = (if v=hv 
                    then tx 
                    else ((hv, hi)#(rmVar v tx)))"



(*Fonctions pour san3 *)

(* containDangerousVar
RECUPERE: une expression a etudier ET une table des Symboles Dangeureux ET une table des Symboles
RETOURNE: vrai si elle contient des variables non déclarées ou dangeureuses, faux sinon
*)
fun containDangerousVar :: "expression \<Rightarrow> tabSymbDangerous \<Rightarrow> tabSymb \<Rightarrow> bool"
where
"containDangerousVar (Constant xc) tBS tS = False "|
"containDangerousVar (Variable xs) tBS tS = (\<not>(isVar xs tS) \<or> (isVarDangerous xs tBS))"|
"containDangerousVar (Sum e1 e2) tBS tS = ((containDangerousVar e1 tBS tS) \<or> (containDangerousVar e2 tBS tS))" |
"containDangerousVar (Sub e1 e2) tBS tS = ((containDangerousVar e1 tBS tS) \<or> (containDangerousVar e2 tBS tS))" 


(* evalExp
RECUPERE: une expression a etudier ET une table des Symboles
RETOURNE: la valeur calculée de l'expression (toutes les variables doivent etre dans la table
*)
fun evalExp :: "expression \<Rightarrow> tabSymb \<Rightarrow> int"
where
"evalExp (Constant xc) tS = xc "|
"evalExp (Variable xs) tS = (getVar xs tS)"|
"evalExp (Sum e1 e2) tS = ((evalExp e1 tS) + (evalExp e2 tS))" |
"evalExp (Sub e1 e2) tS = ((evalExp e1 tS) - (evalExp e2 tS))" 

(* isExpSafeList
RECUPERE: une expression a etudier ET la list des tests,tables des symboles (cas a tester)
RETOURNE: vrai dans la list de tests,tables des symboles si elle safe (si l'expression est different de zero et ne contien pas de variables dangeureuses), faux sinon
*)
fun isExpSafeList :: "expression \<Rightarrow> (bool * tabSymbDangerous * tabSymb) list  \<Rightarrow> (bool * tabSymbDangerous * tabSymb) list "
where
"isExpSafeList e [] = []"|
"isExpSafeList e ((hbool, htSD, htS)#tx) = (if  ((\<not> hbool) \<or> (containDangerousVar e htSD htS))
                                            then ((False, htSD, htS)#(isExpSafeList e tx))
                                            else ((  (\<not>((evalExp e htS)=0) ), htSD, htS  )#(isExpSafeList e tx))
                                            )"


(* updateTablesToDangerousList
RECUPERE: la variable a rentrée comme dangeureuse ET la list des tests,tables des symboles (cas a tester)
RETOURNE: rend la list des tests,tables des symboles a jour (pour un read)
*)
fun updateTablesToDangerousList :: "string \<Rightarrow> (bool * tabSymbDangerous * tabSymb) list \<Rightarrow> (bool * tabSymbDangerous * tabSymb) list"
where
"(updateTablesToDangerousList v []) = []"|
"(updateTablesToDangerousList v ((hbool, htSD, htS)#tx)) = ((hbool, (updateVarDangerous v htSD), (rmVar v htS)) # (updateTablesToDangerousList v tx))"


(* isOneFalse
RECUPERE: la list des tests,tables des symboles (cas a tester)
RETOURNE: vrai si dans la list de tests,tables des symboles il y a un zero, faux sinon
*)
fun isOneFalse :: "(bool * tabSymbDangerous * tabSymb) list \<Rightarrow> bool"
where
"isOneFalse [] = False"|
"isOneFalse ((hbool, htSB, htS)#tdouble) = (if \<not>hbool then True else (isOneFalse tdouble))"

(*Fonction san3*)

fun san3rec :: "statement \<Rightarrow>  (bool * tabSymbDangerous * tabSymb) list \<Rightarrow> (bool * tabSymbDangerous * tabSymb) list"
where
"(san3 (Exec e) listTests) = (isExpSafeList e listTests)"|
"(san3 (Read v) listTests) = (updateTablesToDangerousList v listTests)"|



fun san3 :: "statement \<Rightarrow> bool"
where
"san3 st = \<not>(isOneFalse (san3rec st []))"

























(*
fun san3rec :: "statement \<Rightarrow> tabSymbDangerous \<Rightarrow> tabSymb \<Rightarrow> (bool * tabSymbDangerous * tabSymb)"
where
"san3rec (Exec e) tSD tS =((isExpSafe e tSD tS),tSD,tS) "|
"san3rec (Seq s1 s2) tSD tS = (let (test, new_tSD, new_tS) = (san3rec s1 tSD tS) in 
                              (if test = False 
                                then (False, new_tSD, new_tS)
                               else
                                (san3rec s2 new_tSD new_tS)))"|
(******)
"san3rec (If cond s1 s2) tSD tS = (if (isThenAccessible cond tSD tS)
                                    then (let (tests1, new_tSDs1, new_tSs1) = (san3rec s1 tSD tS) in 
                                      (if (isElseAccessible cond tSD tS)
                                        then (let (tests2, new_tSDs2, new_tSs2) = (san3rec s2 tSD tS) in 
                                          
                                        else
                                      )
                                    else
                                  )))"|

"san3rec _ tSD tS = (True,tSD,tS)"
*)

(* ----- Restriction de l'export Scala (Isabelle 2014) -------*)
(* ! ! !  NE PAS MODIFIER ! ! ! *)
(* Suppression de l'export des abstract datatypes (Isabelle 2014) *)

code_reserved Scala
  expression condition statement 
code_printing
  type_constructor expression \<rightharpoonup> (Scala) "expression"
  | constant Constant \<rightharpoonup> (Scala) "Constant"
  | constant Variable \<rightharpoonup> (Scala) "Variable"
  | constant Sum \<rightharpoonup> (Scala) "Sum"
  | constant Sub \<rightharpoonup> (Scala) "Sub"  

  | type_constructor condition \<rightharpoonup> (Scala) "condition"
  | constant Eq \<rightharpoonup> (Scala) "Eq"

  | type_constructor statement \<rightharpoonup> (Scala) "statement"
  | constant Seq \<rightharpoonup> (Scala) "Seq"
  | constant Aff \<rightharpoonup> (Scala) "Aff"
  | constant Read \<rightharpoonup> (Scala) "Read"
  | constant Print \<rightharpoonup> (Scala) "Print"
  | constant Exec \<rightharpoonup> (Scala) "Exec"
  | constant If \<rightharpoonup> (Scala) "If"
  | constant Skip \<rightharpoonup> (Scala) "Skip"
  | code_module "" \<rightharpoonup> (Scala) 

{*// Code generated by Isabelle
package tp67

import utilities.Datatype._
// automatic conversion of utilities.Datatype.Int.int to Int.int
object AutomaticConversion{ 
	implicit def int2int(i:utilities.Datatype.Int.int):Int.int =
			i match {
			case utilities.Datatype.Int.int_of_integer(i)=>Int.int_of_integer(i)
	}
}
import AutomaticConversion._
*}


(* Directive pour l'exportation de l'analyseur *)
export_code ... in Scala 
(* file "~/workspace/TP67/src/tp67/san.scala"   (* Ã  adapter en fonction du chemin de votre projet TP67 *)
*)


end

